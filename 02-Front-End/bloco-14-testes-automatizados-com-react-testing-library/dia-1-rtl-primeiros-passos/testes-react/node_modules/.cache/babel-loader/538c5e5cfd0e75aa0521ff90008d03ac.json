{"ast":null,"code":"var _jsxFileName = \"/home/natalia/TRYBE/trybe-exercicios/02-Front-End/bloco-14-testes-automatizados-com-react-testing-library/dia-1-rtl-primeiros-passos/testes-react/src/ValidEmail.js\";\n// ValidEmail.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst verifyEmail = email => {\n  const emailRegex = /[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+/;\n  return emailRegex.test(email);\n};\n\nconst ValidEmail = props => {\n  const {\n    email\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      \"data-testid\": \"id-email-user\",\n      children: `Valor: ${email}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: verifyEmail(email) ? 'Email Válido' : 'Email Inválido'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), email && /*#__PURE__*/_jsxDEV(\"h3\", {\n      \"data-testid\": \"id-is-email-valid\",\n      children: verifyEmail(email) ? 'Email Válido' : 'Email Inválido'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ValidEmail;\nValidEmail.propTypes = {\n  email: PropTypes.string.isRequired\n};\nexport default ValidEmail;\n\nvar _c;\n\n$RefreshReg$(_c, \"ValidEmail\");","map":{"version":3,"names":["React","PropTypes","verifyEmail","email","emailRegex","test","ValidEmail","props","propTypes","string","isRequired"],"sources":["/home/natalia/TRYBE/trybe-exercicios/02-Front-End/bloco-14-testes-automatizados-com-react-testing-library/dia-1-rtl-primeiros-passos/testes-react/src/ValidEmail.js"],"sourcesContent":["// ValidEmail.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst verifyEmail = (email) => {\n  const emailRegex = /[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+/;\n  return emailRegex.test(email);\n};\n\nconst ValidEmail = (props) => {\n  const { email } = props;\n  return (\n    <div>\n      <h2 data-testid=\"id-email-user\">{`Valor: ${email}`}</h2>\n      <h3>{(verifyEmail(email) ? 'Email Válido' : 'Email Inválido')}</h3>\n      {\n           email && (\n             <h3 data-testid=\"id-is-email-valid\" >\n               {(verifyEmail(email) ? 'Email Válido' : 'Email Inválido')}\n             </h3>\n           )\n         }\n    </div>\n  );\n};\n\nValidEmail.propTypes = {\n  email: PropTypes.string.isRequired,\n};\n\nexport default ValidEmail;"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAC7B,MAAMC,UAAU,GAAG,yCAAnB;EACA,OAAOA,UAAU,CAACC,IAAX,CAAgBF,KAAhB,CAAP;AACD,CAHD;;AAKA,MAAMG,UAAU,GAAIC,KAAD,IAAW;EAC5B,MAAM;IAAEJ;EAAF,IAAYI,KAAlB;EACA,oBACE;IAAA,wBACE;MAAI,eAAY,eAAhB;MAAA,UAAkC,UAASJ,KAAM;IAAjD;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,UAAMD,WAAW,CAACC,KAAD,CAAX,GAAqB,cAArB,GAAsC;IAA5C;MAAA;MAAA;MAAA;IAAA,QAFF,EAIOA,KAAK,iBACH;MAAI,eAAY,mBAAhB;MAAA,UACID,WAAW,CAACC,KAAD,CAAX,GAAqB,cAArB,GAAsC;IAD1C;MAAA;MAAA;MAAA;IAAA,QALT;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CAfD;;KAAMG,U;AAiBNA,UAAU,CAACE,SAAX,GAAuB;EACrBL,KAAK,EAAEF,SAAS,CAACQ,MAAV,CAAiBC;AADH,CAAvB;AAIA,eAAeJ,UAAf"},"metadata":{},"sourceType":"module"}